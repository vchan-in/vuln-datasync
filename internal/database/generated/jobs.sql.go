// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (type, payload, queue, priority, max_retry)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at
`

type CreateJobParams struct {
	Type     string `json:"type"`
	Payload  []byte `json:"payload"`
	Queue    string `json:"queue"`
	Priority int32  `json:"priority"`
	MaxRetry int32  `json:"max_retry"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.Type,
		arg.Payload,
		arg.Queue,
		arg.Priority,
		arg.MaxRetry,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.State,
		&i.Queue,
		&i.Priority,
		&i.MaxRetry,
		&i.Retried,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteCompletedJobs = `-- name: DeleteCompletedJobs :exec
DELETE FROM jobs 
WHERE state IN ('completed', 'failed') 
AND completed_at < $1
`

func (q *Queries) DeleteCompletedJobs(ctx context.Context, completedAt pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteCompletedJobs, completedAt)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at FROM jobs WHERE id = $1
`

func (q *Queries) GetJob(ctx context.Context, id int32) (Job, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.State,
		&i.Queue,
		&i.Priority,
		&i.MaxRetry,
		&i.Retried,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getJobStats = `-- name: GetJobStats :one
SELECT 
    COUNT(*) FILTER (WHERE state = 'pending') as pending_count,
    COUNT(*) FILTER (WHERE state = 'processing') as processing_count,
    COUNT(*) FILTER (WHERE state = 'completed') as completed_count,
    COUNT(*) FILTER (WHERE state = 'failed') as failed_count,
    COUNT(*) as total_count
FROM jobs
`

type GetJobStatsRow struct {
	PendingCount    int64 `json:"pending_count"`
	ProcessingCount int64 `json:"processing_count"`
	CompletedCount  int64 `json:"completed_count"`
	FailedCount     int64 `json:"failed_count"`
	TotalCount      int64 `json:"total_count"`
}

func (q *Queries) GetJobStats(ctx context.Context) (GetJobStatsRow, error) {
	row := q.db.QueryRow(ctx, getJobStats)
	var i GetJobStatsRow
	err := row.Scan(
		&i.PendingCount,
		&i.ProcessingCount,
		&i.CompletedCount,
		&i.FailedCount,
		&i.TotalCount,
	)
	return i, err
}

const getJobsByState = `-- name: GetJobsByState :many
SELECT id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at FROM jobs 
WHERE state = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetJobsByStateParams struct {
	State  string `json:"state"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetJobsByState(ctx context.Context, arg GetJobsByStateParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByState, arg.State, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Payload,
			&i.State,
			&i.Queue,
			&i.Priority,
			&i.MaxRetry,
			&i.Retried,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.ProcessedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingJobs = `-- name: GetPendingJobs :many
SELECT id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at FROM jobs 
WHERE state = 'pending' AND queue = $1
ORDER BY priority DESC, created_at ASC
LIMIT $2
`

type GetPendingJobsParams struct {
	Queue string `json:"queue"`
	Limit int32  `json:"limit"`
}

func (q *Queries) GetPendingJobs(ctx context.Context, arg GetPendingJobsParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, getPendingJobs, arg.Queue, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Payload,
			&i.State,
			&i.Queue,
			&i.Priority,
			&i.MaxRetry,
			&i.Retried,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.ProcessedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementJobRetry = `-- name: IncrementJobRetry :one
UPDATE jobs SET
    retried = retried + 1,
    state = CASE WHEN retried + 1 >= max_retry THEN 'failed' ELSE 'pending' END,
    error_message = $2
WHERE id = $1
RETURNING id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at
`

type IncrementJobRetryParams struct {
	ID           int32       `json:"id"`
	ErrorMessage pgtype.Text `json:"error_message"`
}

func (q *Queries) IncrementJobRetry(ctx context.Context, arg IncrementJobRetryParams) (Job, error) {
	row := q.db.QueryRow(ctx, incrementJobRetry, arg.ID, arg.ErrorMessage)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.State,
		&i.Queue,
		&i.Priority,
		&i.MaxRetry,
		&i.Retried,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateJobState = `-- name: UpdateJobState :one
UPDATE jobs SET
    state = $2,
    processed_at = CASE WHEN $2 = 'processing' THEN NOW() ELSE processed_at END,
    completed_at = CASE WHEN $2 IN ('completed', 'failed') THEN NOW() ELSE completed_at END,
    error_message = $3
WHERE id = $1
RETURNING id, type, payload, state, queue, priority, max_retry, retried, error_message, created_at, processed_at, completed_at
`

type UpdateJobStateParams struct {
	ID           int32       `json:"id"`
	State        string      `json:"state"`
	ErrorMessage pgtype.Text `json:"error_message"`
}

func (q *Queries) UpdateJobState(ctx context.Context, arg UpdateJobStateParams) (Job, error) {
	row := q.db.QueryRow(ctx, updateJobState, arg.ID, arg.State, arg.ErrorMessage)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.State,
		&i.Queue,
		&i.Priority,
		&i.MaxRetry,
		&i.Retried,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.CompletedAt,
	)
	return i, err
}
