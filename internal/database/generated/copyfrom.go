// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBatchUpsertVulnerabilities implements pgx.CopyFromSource.
type iteratorForBatchUpsertVulnerabilities struct {
	rows                 []BatchUpsertVulnerabilitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchUpsertVulnerabilities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchUpsertVulnerabilities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Summary,
		r.rows[0].Details,
		r.rows[0].Severity,
		r.rows[0].PublishedAt,
		r.rows[0].ModifiedAt,
		r.rows[0].Ecosystem,
		r.rows[0].PackageName,
		r.rows[0].AffectedVersions,
		r.rows[0].FixedVersions,
		r.rows[0].Aliases,
		r.rows[0].Refs,
		r.rows[0].Source,
		r.rows[0].Raw,
		r.rows[0].DataHash,
	}, nil
}

func (r iteratorForBatchUpsertVulnerabilities) Err() error {
	return nil
}

func (q *Queries) BatchUpsertVulnerabilities(ctx context.Context, arg []BatchUpsertVulnerabilitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"vulnerabilities"}, []string{"id", "summary", "details", "severity", "published_at", "modified_at", "ecosystem", "package_name", "affected_versions", "fixed_versions", "aliases", "refs", "source", "raw", "data_hash"}, &iteratorForBatchUpsertVulnerabilities{rows: arg})
}
